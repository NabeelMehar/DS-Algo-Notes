//https://www.pepcoding.com/resources/online-java-foundation/dynamic-programming-and-greedy/min-cost-maze-traversal-official/ojquestion#

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        
        Scanner sn=new Scanner(System.in);
        
        int n=sn.nextInt();
        int m=sn.nextInt();
        
        int[][] arr=new int[n][m];
        
        for(int i=0 ;i<arr.length;i++){
         for(int j=0 ;j<arr[0].length;j++){
            arr[i][j]=sn.nextInt();
         }   
        }
        
        int[][] dp=new int[n+1][m+1];
        
        for(int[] a : dp){
            Arrays.fill(a ,-1);
        }
        
        System.out.println(minPath(n-1 , m-1 ,arr ,dp));
        
    }
    
    public static int minPath(int i ,int j ,int[][] arr ,int[][] dp){
        
        if(i==0 && j==0){
            return arr[i][j];
        }
        
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        
        int v=Integer.MAX_VALUE;
        int h=Integer.MAX_VALUE;

        if(i-1 >= 0){
            v=minPath(i-1 ,j ,arr ,dp)+arr[i][j];
        }
        
        if(j-1 >= 0){
            h=minPath(i ,j-1 ,arr ,dp)+arr[i][j];
        }
        
        return dp[i][j]=Math.min(v ,h);
        
    }
}