  public static class HashMap<K, V> {
    private class HMNode {
      K key;
      V value;

      HMNode(K key, V value) {
        this.key = key;
        this.value = value;
      }
    }

    private int size; // n
    private LinkedList<HMNode>[] buckets; // N = buckets.length

    public HashMap() {
      initbuckets(4);
      size = 0;
    }

    private void initbuckets(int N) {
      buckets = new LinkedList[N];
      for (int bi = 0; bi < buckets.length; bi++) {
        buckets[bi] = new LinkedList<>();
      }
    }

    public void put(K key, V value) throws Exception {
      
      int bi=getBucketIndex(key);
      int li=getListIndex(bi ,key);
      
      
      if(li==-1){
          
          HMNode node=new HMNode(key ,value);
          buckets[bi].add(node);
          size++;
          
      }else{
          
          HMNode node=buckets[bi].get(li);
          node.value=value;
          
      }
      
      double lamda=size*1.0/buckets.length;
      
      if(lamda>2.0){
          rehash();
      }
      
    }
    
    public int getBucketIndex(K k){
        return Math.abs(k.hashCode())%buckets.length;
    }
    
    public int getListIndex(int bi ,K k){
        
        for(int i=0;i<buckets[bi].size();i++){
            if(buckets[bi].get(i).key.equals(k)){
                return i;
            }    
        }
        
        return -1;
    }
    
    
    public void rehash() throws Exception{
        
        LinkedList<HMNode>[] oldbucks=buckets;
        initbuckets(buckets.length*2);
        size=0;
        
        for(int i=0;i<oldbucks.length;i++){
            for(HMNode node:oldbucks[i]){
                put(node.key ,node.value);
            }
        }
        
    }

    public V get(K key) throws Exception {
        
      int bi=getBucketIndex(key);
      int li=getListIndex(bi ,key);
      
      if(li==-1){
          return null;
      }else{
          return buckets[bi].get(li).value;
      }
      
    }

    public boolean containsKey(K key) {
        
      int bi=getBucketIndex(key);
      int li=getListIndex(bi ,key);
      

      if(li==-1){
          return false;
      }else{
          return true;
      }
      
    }

    public V remove(K key) throws Exception {
        
      int bi=getBucketIndex(key);
      int li=getListIndex(bi ,key);
      

      if(li==-1){
          return null;
      }else{
          size--;
          return buckets[bi].remove(li).value;
          
      }    
        
    }

    public ArrayList<K> keyset() throws Exception {
      
      ArrayList<K> al=new ArrayList();
      
      for(int i=0;i<buckets.length;i++){
        for(int j=0;j<buckets[i].size();j++){
          al.add(buckets[i].get(j).key);
        }   
      }
      
      return al;
      
    }

    public int size() {
      return size;
    }

   public void display() {
      System.out.println("Display Begins");
      for (int bi = 0; bi < buckets.length; bi++) {
        System.out.print("Bucket" + bi + " ");
        for (HMNode node : buckets[bi]) {
          System.out.print( node.key + "@" + node.value + " ");
        }
        System.out.println(".");
      }
      System.out.println("Display Ends");
  }
}