//GFG
//https://practice.geeksforgeeks.org/problems/palindromic-patitioning4845/1

class Solution{
    static int palindromicPartition(String s1)
    {
    
        int[][] dp=new int[s1.length()+1][s1.length()+1];    
        
        for(int[] arr:dp){
            Arrays.fill(arr ,-1);
        }    
            
        return  palpart(s1 , 0 ,s1.length()-1 ,dp);
        
    }
    
    static int palpart(String s1 ,int i ,int j ,int[][] dp)
    {
        if(i>=j){
            return 0;
        }
        
        if(isPalindrome(s1 ,i ,j)){
            return 0;
        }
        
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        
        int mn=Integer.MAX_VALUE;
        
        for(int k=i;k<=j-1;k++){
            
            int temp=palpart(s1 ,i,k ,dp)+palpart(s1 ,k+1 ,j ,dp)+1;
            
            if(temp < mn){
                mn=temp;
            }
            
        }
        return dp[i][j]=mn;
    }
    
    public static boolean isPalindrome(String s1 ,int i ,int j){
        while(i<=j){
            
            if(s1.charAt(i)!=s1.charAt(j)){
                return false;
            }
            
            i++;
            j--;
        }
        return true;
        
    }
    
    
    
}