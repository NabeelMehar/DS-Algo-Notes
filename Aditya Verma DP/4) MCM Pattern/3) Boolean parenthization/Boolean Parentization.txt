//GFG
//https://practice.geeksforgeeks.org/problems/boolean-parenthesization5610/1#

class Solution{
    static int countWays(int n, String s1){
        
        int[][][] dp=new int[n+1][n+1][3];
        
        for(int[][]a :dp){
         for(int[]aa :a){
            Arrays.fill(aa ,-1);
         }   
        }
        
        return paranthize(s1 ,0 ,s1.length()-1 ,true ,dp);
    
    }
    
    static int paranthize(String s1 ,int i  ,int j ,boolean isTrue ,int[][][] dp){
        
        if(i == j){
            if(isTrue){
                
                if(s1.charAt(i)=='T'){
                    return 1;
                }else{
                    return 0;
                }
                
            }else{
                
                if(s1.charAt(i)=='F'){
                    return 1;
                }else{
                    return 0;
                }
                
            }
        }
        
        if(dp[i][j][isTrue ? 1 :2]!=-1){
            return dp[i][j][isTrue ? 1 :2];
        }
        
        int ways=0;
        
        for(int k=i+1 ;k<j ;k=k+2){
            
            int lt=dp[i][k-1][1]=paranthize(s1 ,i , k-1 ,true ,dp);
            int lf=dp[i][k-1][2]=paranthize(s1 ,i , k-1 ,false ,dp);
            
            int rt=dp[k+1][j][1]=paranthize(s1 ,k+1 ,j ,true ,dp);
            int rf=dp[k+1][j][2]=paranthize(s1 ,k+1 ,j ,false ,dp);
            
            char exp=s1.charAt(k);
            
            
            if(exp=='^'){
                
                if(isTrue){
                    ways+=(lt*rf)+(lf*rt);
                }else{
                    ways+=(lt*rt)+(lf*rf);
                }
                
            }else if(exp=='|'){
                
                if(isTrue){ 
                    ways+=(lt*rt)+(lt*rf)+(lf*rt);
                }else{
                    ways+=lf*rf;
                }
                
            }else if(exp=='&'){
                
                if(isTrue){
                    ways+=lt*rt;
                }else{
                   ways+=(lf*rf)+(lt*rf)+(lf*rt);
                }
                
            }
            
        }

        return dp[i][j][isTrue ? 1 :2]=ways%1003;
    }
    
    
}