//Inteview Bit

public class Solution {
    public int solve(int[] arr, int B) {
        
        int[][] dp=new int[arr.length+1][B+1];
        
        
        
        for(int i=0;i<dp.length ;i++){
            for(int j=0;j<dp[0].length;j++){
                
                if(j==0){
                    dp[i][j]=1;
                }else if(i==0){
                    dp[i][j]=0;
                }else{
                    if(arr[i-1]<= j){
                        if(dp[i-1][j-arr[i-1]]==1 || dp[i-1][j]==1){
                            dp[i][j]=1;
                        }else{
                            dp[i][j]=0;
                        }
                    }else{
                        if(dp[i-1][j]==1){
                            
                            dp[i][j]=1;
                            
                        }else{
                            
                            dp[i][j]=0;
                            
                        }
                    }
                }
                
            }
        }
        
        return dp[arr.length][B];
        
 
        // for(int i=0;i<dp.length ;i++){
        //     for(int j=0;j<dp[0].length;j++){
        //         dp[i][j]=-1;
        //     }
        // }
        
        // return subsum(A , B ,A.length, dp);
        
    }
    
    public static int subsum(int[] arr , int b ,int n ,int[][] dp){
        
        if(b==0){
            return 1;
        }
        
        if(n==0){
            return 0;
        }
        
        if(dp[n][b]!=-1){
            return dp[n][b];
        }
        
        if(arr[n-1] <= b){
            if(subsum(arr , b-arr[n-1] , n-1 ,dp)==1 || subsum(arr , b , n-1 ,dp)==1){
                return dp[n][b]=1;
            }else{
                return dp[n][b]=0;
            }
        }
        else{
            if(subsum(arr , b , n-1 ,dp)==1){
                return dp[n][b]=1;
            }else{
                return dp[n][b]=0;
            }
            
        }
        
    }
    
}