//Pepcoding

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        
        Scanner sn=new Scanner(System.in);
        
        int n=sn.nextInt();
        
        int[] val=new int[n];
        int[] wt=new int[n];
        
        for(int i=0;i<n;i++){
            val[i]=sn.nextInt();
        }
        
        for(int i=0;i<n;i++){
            wt[i]=sn.nextInt();
        }
        
        int tar=sn.nextInt();
        
        int[] ans=new int[n];
        int[][] dp=new int[n+1][tar+1];
        
        
        for(int i=1;i<dp.length;i++){
           for(int j=1;j<dp[0].length;j++){
            
                if(wt[i-1] <= j){
                    
                    dp[i][j]=Math.max(val[i-1] + dp[i-1][j-wt[i-1]] , dp[i-1][j]);
                    
                }else{
                    
                    dp[i][j]=dp[i-1][j];
                }
            
           } 
        }
        
        System.out.println(dp[n][tar]);
        
        // int mval = knap(val , wt , n-1 , tar, dp);
        // System.out.println(mval);
        
        

    }
    
    public static int knap(int[] val ,int[] wt , int idx ,int w , int[][] dp){
        
        if(w==0 || idx==-1){
            return 0;
        }
        
        if(dp[idx][w]!=0){
            return dp[idx][w];
        }
        
        if(wt[idx] <= w){
            return dp[idx][w]=Math.max(val[idx] + knap(val , wt , idx-1 , w-wt[idx] , dp) , knap(val , wt , idx-1 , w , dp));
        }
        
        return dp[idx][w] = knap(val , wt , idx-1 , w , dp);
        
    }
    
}